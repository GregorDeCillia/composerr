% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/composerr.R
\name{composerr_helper}
\alias{composerr_helper}
\title{Helper function for \code{\link[=composerr]{composerr()}}}
\usage{
composerr_helper(before, err_h, after, collapse, action, err_h_usage)
}
\arguments{
\item{before}{Optional string that will be prepended
to the error message \code{msg}, when the resulting error handler is called.}

\item{err_h}{Optional \strong{parent error handler}. It must either be \code{NULL}
or a \strong{composerr class object} created with the function \code{\link[=composerr]{composerr()}}.
If \code{err_h} is omitted, then \code{composerr()} creates a new error handler from
scratch. Otherwise, the error handler passed to \code{err_h} is used as
parent error handler for the creation of the new error handler.}

\item{after}{Optional string that will be appended
to the error message \code{msg}, when the resulting error handler is called.}

\item{collapse}{Optional string that will be used for collapsing the
resulting error message \code{paste0(before, msg, after)}, when
the resulting error handler is called. If \code{collapse} is set to
\code{NULL}, then the resulting error message will not be collapsed, but
directly be passed on.}

\item{action}{Optional \strong{default ultimate error handler}. This argument
can either be \code{NULL} (no default handler defined) or a function
\verb{function(msg, ...)}. In the latter case this defines a default
function that will be used as ultimate error handler if the current
error handler is called without passing an \code{action} argument.
The used ultimate error handler is passed down the error handler cascade
until it ultimately will be called in order to process the successively
extended error message (e.g. throw an error or a warning or do something
else with the created error message).
The argument \code{action} can be used, in order to change the
default behavior of the error processing to throwing a warning
(\code{action = warning}) or
some other customized behavior like
writing the error message to a text file
(\code{action = function(msg, ...) cat(msg, file = FILENAME, fill = TRUE)}).}

\item{err_h_usage}{An error handling function for catching
errors because of improper usage of \code{composerr_helper()}.}
}
\description{
Helper function for \code{\link[=composerr]{composerr()}}
}
