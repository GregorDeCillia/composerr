% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/composerr.R
\name{composerr_helper}
\alias{composerr_helper}
\title{Helper function for \code{\link[=composerr]{composerr()}} and \code{\link[=composerr_modify]{composerr_modify()}}}
\usage{
composerr_helper(
  text_1,
  err_h,
  text_2,
  sep_1,
  sep_2,
  multiflush_start,
  multiflush_prefix,
  multiflush_end,
  internal_handler,
  new_handler,
  err_h_usage
)
}
\arguments{
\item{text_1}{A character string, which will be appended
at the beginning of the error message. The argument \code{sep_1} will be used
as text separator.}

\item{err_h}{An existing error handling function created with \code{composerr()}.}

\item{text_2}{A character string, which will be appended
at the end of the error message. The argument \code{sep_2} will be used
as text separator.}

\item{sep_1}{A character string that is used as separator for the
concatenation of \code{text_1} at the beginning of the error message.}

\item{sep_2}{A character string that is used as separator for the
concatenation of \code{text_2} at the end of the error message.}

\item{multiflush_start}{An optional string which will be added before
a multi-line error stack section, when calling \code{composerr_flush()}.
This argument only takes effect, if \code{composerr_halt(err_h)} was called
once, then at least two times \code{err_h()} and then \code{composerr_flush(err_h)}.}

\item{multiflush_prefix}{An optional string which will be added before
each line of a multi-line error stack section, when calling \code{composerr_flush()}.
This argument only takes effect, if \code{composerr_halt(err_h)} was called
once, then at least two times \code{err_h()} and then \code{composerr_flush(err_h)}.}

\item{multiflush_end}{An optional string which will be added after
a multi-line error stack section, when calling \code{composerr_flush()}.
This argument only takes effect, if \code{composerr_halt(err_h)} was called
once, then at least two times \code{err_h()} and then \code{composerr_flush(err_h)}.}

\item{internal_handler}{An optional error handling function used
as default value for \code{internal_handler} when calling \code{err_h(msg, internal_handler)}.
This argument can be used, in order to change the default behavior of the
error handling to throwing a warning (\code{internal_handler = warning}) or
some other customized behavior instead of throwing an error, like
writing the error message to a text file
(\code{internal_handler = function(text) cat(text, FILENAME)}).}

\item{new_handler}{A logical value. If set to \code{TRUE}, then a new error
handling function is created, enhancing the existing error handling
function \code{err_h()}. If \code{new_handler} set to \code{FALSE}, then the existing
error handling function \code{err_h()} will be modified.}

\item{err_h_usage}{An error handling function for catching
errors because of improper usage of \code{composerr_helper()}.}
}
\description{
Helper function for \code{\link[=composerr]{composerr()}} and \code{\link[=composerr_modify]{composerr_modify()}}
}
