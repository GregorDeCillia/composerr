% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/closure.R
\name{restrict_fn_env}
\alias{restrict_fn_env}
\title{Restrict function environment}
\usage{
restrict_fn_env(fn, vars = NULL, lookup_env = environment(fn))
}
\arguments{
\item{fn}{A function whose parent scope should be restricted to the
set of variables given in \code{vars} and the loaded packages.}

\item{vars}{An optional object, telling which variables should be
available in \code{fn()}. It can either be
\itemize{
\item a \code{character} vector holding the names of the variables which should
looked up in the environment \code{lookup_env}.
\item a named \code{list}: In this case, the values are not looked up in
\code{lookup_env}, but directly taken from the list item values and the
list item names are used as variable names.
}}

\item{lookup_env}{The environment holding the variables for which the names
are defined in the  character vector \code{vars}.
If \code{vars} is a list or \code{NULL}, then \code{lookup_env} is not used.
The default for \code{lookup_env} is the environment where the function \code{fn}
was defined.}
}
\value{
A new function with a small scope containing the variables given
in \code{vars}.
}
\description{
Build a new function with an optimal scope. Normally the entire
environment tree (including the entire ancestry) is kept in memory,
but with \code{restrict_fn_env()} you get a function that has only
a copies of all needed variables and the scope ancestry holds only the
global environment.
}
