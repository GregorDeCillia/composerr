% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/closure.R
\name{eval_closure}
\alias{eval_closure}
\title{Eval code in closure without scoping problems (memory leaks)}
\usage{
eval_closure(expr, vars = NULL, lookup_env = parent.frame())
}
\arguments{
\item{expr}{The expression, which should be evaluated inside of the
closure.}

\item{vars}{An optional object, telling which variables should be
available inside the closure. It can either be
\itemize{
\item a \code{character} vector holding the names of the variables which should
looked up in the environment \code{lookup_env}.
\item a named \code{list}: In this case, the values are not looked up in
\code{lookup_env}, but directly taken from the list item values and the
list item names are used as variable names.
}}

\item{lookup_env}{The environment holding the variables for which the names
are defined in the  character vector \code{vars}.
If \code{vars} is a list or \code{NULL}, then \code{lookup_env} is not used.
The default for \code{lookup_env} is the environment where the function \code{fn}
was defined.}
}
\description{
Eval code in closure without scoping problems (memory leaks)
}
